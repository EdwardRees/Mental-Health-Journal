generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String // hashed
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
}

model GeneralEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  title     String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  date      DateTime
}

model GratitudeEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  gratitude String
  date      DateTime
}

model AffirmationEntry {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  affirmation String
  date        DateTime
}

model MoodEntry {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  mood      String
  emotions  String[]
  moodScore Int
  date      DateTime
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String
  expiresAt DateTime
  used      Boolean
}

model User {
  id                 Int                @id @default(autoincrement())
  auth               Auth?
  gratitudeEntries   GratitudeEntry[]
  affirmationEntries AffirmationEntry[]
  moodEntries        MoodEntry[]
  generalEntries     GeneralEntry[]
  passwordReset      PasswordReset[]
}
